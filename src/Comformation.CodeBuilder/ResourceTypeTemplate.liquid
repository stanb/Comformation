using System;
using System.Collections.Generic;
using Comformation.IntrinsicFunctions;

namespace {{ resource.Namespace }}
{
    /// <summary>
{% for line in resource.Documentation -%}
    /// {{ line }}
{% endfor -%}
    /// </summary>
    public class {{ resource.Name }}Resource : ResourceBase
    {
        public class {{ resource.Name }}Properties
        {
{% for property in resource.Properties -%}
            /// <summary>
{% for line in property.Documentation -%}
            /// {{ line }}
{% endfor -%}
            /// </summary>
{% if property.Name != property.JsonProperty -%}
            [Newtonsoft.Json.JsonProperty("{{ property.JsonProperty }}")]
{% endif -%}
            public {{ property.Type }} {{ property.Name }} { get; set; }

{% endfor -%}
        }

        public string Type { get; } = "{{ resource.Type }}";

        public {{ resource.Name }}Properties Properties { get; } = new {{ resource.Name }}Properties();

{% if resource.HasCreationPolicy -%}
        /// <summary>
        /// Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until AWS CloudFormation receives
        /// a specified number of success signals or the timeout period is exceeded. To signal a resource, you can use the cfn-signal helper script or 
        /// SignalResource API. AWS CloudFormation publishes valid signals to the stack events so that you track the number of signals sent.
        /// The creation policy is invoked only when AWS CloudFormation creates the associated resource.Currently, the only AWS CloudFormation resources 
        /// that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance, and AWS::CloudFormation::WaitCondition.
        /// Use the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds. For example, if you 
        /// install and configure software applications on an EC2 instance, you might want those applications to be running before proceeding. In such 
        /// cases, you can add a CreationPolicy attribute to the instance, and then send a success signal to the instance after the applications are 
        /// installed and configured.
        /// https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
        /// </summary>
        public CreationPolicy CreationPolicy { get; set; }

{% endif -%}
{% if resource.HasUpdatePolicy -%}
        /// <summary>
        /// Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup or AWS::Lambda::Alias 
        /// resource.
        /// For AWS::AutoScaling::AutoScalingGroup resources, AWS CloudFormation invokes one of three update policies depending on the type of change you make 
        /// or whether a scheduled action is associated with the Auto Scaling group.
        /// The AutoScalingReplacingUpdate and AutoScalingRollingUpdate policies apply only when you do one or more of the following:
        ///   Change the Auto Scaling group's AWS::AutoScaling::LaunchConfiguration.
        ///   Change the Auto Scaling group's VPCZoneIdentifier property
        ///   Change the Auto Scaling group's LaunchTemplate property
        ///   Update an Auto Scaling group that contains instances that don't match the current LaunchConfiguration.
        /// If both the AutoScalingReplacingUpdate and AutoScalingRollingUpdate policies are specified, setting the WillReplace property to true gives 
        /// AutoScalingReplacingUpdate precedence.
        /// The AutoScalingScheduledAction policy applies when you update a stack that includes an Auto Scaling group with an associated scheduled action.
        /// For AWS::Lambda::Alias resources, AWS CloudFormation performs an AWS CodeDeploy deployment when the version changes on the alias.
        /// https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html
        /// </summary>
        public UpdatePolicy UpdatePolicy { get; set; }

{% endif -%}
    }
{% if resource.Attributes.size > 0 -%}

    public static class {{ resource.Name }}Attributes
    {
{% for attr in resource.Attributes -%}
        public static readonly ResourceAttribute<{{ attr.Type }}> {{ attr.Name }} = new ResourceAttribute<{{ attr.Type }}>("{{ attr.Value }}");
{% endfor -%}
    }
{% endif -%}
}
